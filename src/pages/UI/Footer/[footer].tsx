import Head from "next/head";
import { withLayout } from "../../../components/Layout/withLayout";
import dynamic from "next/dynamic";
import { Box } from "@mui/material";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";
const AboutLoopVillage = dynamic(() => import("../../../components/Footer/AboutLoopVillage"), {
    loading: () => <AboutLoopVillageSkeleton />,
});
const Founders = dynamic(() => import("../../../components/Footer/Founders"), {
    loading: () => <FounderSkeleton />,
});
const Careers = dynamic(() => import("../../../components/Footer/Careers"), {
    loading: () => <CareersSkeleton />,
});
const CancellationProcess = dynamic(() => import("../../../components/Footer/CancellationProcess"), {
    loading: () => <CancellationProcessSkeleton />,
});
const ReportYourConcern = dynamic(() => import("../../../components/Footer/ReportYourConcern"), {
    loading: () => <ReportYourConcernSkeleton />,
});
const PrivacyPolicy = dynamic(() => import("../../../components/Footer/PrivacyPolicy"), {
    loading: () => <PrivacyPolicySkeleton />,
});
const TermOfUse = dynamic(() => import("../../../components/Footer/TermOfUse"), {
    loading: () => <TermOfUseSkeleton />,
});
const FitnessWaiver = dynamic(() => import("../../../components/Footer/FitnessWaiver"), {
    loading: () => <FitnessWaiverSkeleton />,
});
const FAQs = dynamic(() => import("../../../components/Footer/FAQs"), { loading: () => <FAQsSkeleton /> });
const Contact = dynamic(() => import("../../../components/Footer/Contact"), { loading: () => <ContactusSkeleton /> });
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { FooterDetailPageProps } from "../../../components/Footer/Type";
import Loader2 from "../../../components/Loader/Loader2";
import {
    ssrGetAllAboutLoopVillages,
    ssrGetAllCareerss,
    ssrGetAllFaQs,
    ssrGetAllFounders,
} from "../../../generated/page";
import AboutLoopVillageSkeleton from "../../../components/Footer/AboutLoopVillageSkeleton";
import { FounderSkeleton } from "../../../components/Footer/FounderSkeleton";
import { CareersSkeleton } from "../../../components/Footer/CareersSkeleton";
import { TermOfUseSkeleton } from "../../../components/Footer/TermOfUseSkeleton";
import { FitnessWaiverSkeleton } from "../../../components/Footer/FitnessWaiverSkeleton";
import { PrivacyPolicySkeleton } from "../../../components/Footer/PrivacyPolicySkeleton";
import { ContactusSkeleton } from "../../../components/Footer/ContactusSkeleton";
import { ReportYourConcernSkeleton } from "../../../components/Footer/ReportYourConcernSkeleton";
import { CancellationProcessSkeleton } from "../../../components/Footer/CancellationProcessSkeleton";
import { FAQsSkeleton } from "../../../components/Footer/FAQsSkeleton";
import { useUser } from "../../../components/Authenticate/UserContext";

const FooterDetailPage: NextPage<FooterDetailPageProps> = ({
    allFaqs,
    allAboutloopvilages,
    allCareerss,
    allFounders,
}) => {
    const router = useRouter();
    const [footer, setFooter] = useState(router.query.footer);
    const { user } = useUser();

    //useEffect will be triggered everytime when router query path change and setFooter state value.
    useEffect(() => {
        setFooter(router.query.footer);
    }, [router.query.footer]);

    if (user.email || user.phone_number) {
        return (
            <Box sx={{ flexGrow: 1 }}>
                <Head>
                    <title>{footer}</title>
                    <meta name="description" content="Generated by create next app" />
                    <link
                        rel="icon"
                        href="https://images.prismic.io/loop-web-members/4df527d2-6dfb-4c78-9499-a0facef03af3_looptech.webp?auto=compress,format"
                    />
                </Head>
                {footer && footer === "About Loop Village" && <AboutLoopVillage data={allAboutloopvilages} />}
                {footer && footer === "About Founders" && <Founders data={allFounders} />}
                {footer && footer === "Careers" && <Careers data={allCareerss} />}
                {footer && footer === "FAQs" && <FAQs data={allFaqs} />}
                {footer && footer === "Cancellation Process" && <CancellationProcess />}
                {footer && footer === "Report Your Concern" && <ReportYourConcern />}
                {footer && footer === "Privacy Policy" && <PrivacyPolicy />}
                {footer && footer === "Term Of Use" && <TermOfUse />}
                {footer && footer === "Fitness Waiver" && <FitnessWaiver />}
                {footer && footer === "Contact Us" && <Contact />}
            </Box>
        );
    }
    return <Loader2 />;
};

export default withLayout(FooterDetailPage);

export const getStaticProps: GetStaticProps = async (params) => {
    let serverSideProps;
    if (params?.params?.footer === "FAQs") {
        serverSideProps = await ssrGetAllFaQs.getServerPage(
            {
                variables: {},
            },
            {},
        );
    } else if (params?.params?.footer === "About Loop Village") {
        serverSideProps = await ssrGetAllAboutLoopVillages.getServerPage(
            {
                variables: {},
            },
            {},
        );
    } else if (params?.params?.footer === "About Founders") {
        serverSideProps = await ssrGetAllFounders.getServerPage(
            {
                variables: {},
            },
            {},
        );
    } else if (params?.params?.footer === "Careers") {
        serverSideProps = await ssrGetAllCareerss.getServerPage(
            {
                variables: {},
            },
            {},
        );
    }

    return {
        props: {
            ...serverSideProps?.props.data,
        },
        revalidate: 10,
    };
};

export const getStaticPaths: GetStaticPaths = async () => {
    const dynamicPaths = [
        "About Loop Village",
        "About Founders",
        "Careers",
        "FAQs",
        "Cancellation Process",
        "Report Your Concern",
        "Privacy Policy",
        "Term Of Use",
        "Fitness Waiver",
        "Contact Us",
    ];
    return {
        paths: dynamicPaths.map((footer) => ({
            params: { footer: footer },
        })),
        fallback: true,
    };
};
