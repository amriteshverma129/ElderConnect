import { useState, ChangeEvent } from "react";
import Head from "next/head";

import { Box } from "@mui/material";
import { ssrGetAllEventDetail } from "../../../generated/page";
import { NextPage, GetStaticProps } from "next";
import dynamic from "next/dynamic";
const LibraryList = dynamic(() => import("../../../components/Library/LibraryList"), {
    loading: () => <LibrarySkeleton />,
});
import Search from "../../../components/Search/Search";
import styles from "../../../components/Library/Style/library.module.scss";
import Categories from "../../../../Categories.json";
import { LibraryPageProps } from "../../../components/Library/Type";
import MenuItem from "@mui/material/MenuItem";
import Select from "@mui/material/Select";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import Loader2 from "../../../components/Loader/Loader2";
import GridMenuIcon from "../../../icons/GridMenuIcon";
import ListBarMenuIcon from "../../../icons/ListBarMenuIcon";
import { withLayout } from "../../../components/Layout/withLayout";
import LibrarySkeleton from "../../../components/Library/LibrarySkeleton";
import { useUser } from "../../../components/Authenticate/UserContext";

const LibraryPage: NextPage<LibraryPageProps> = ({ map }) => {
    const [search, setSearch] = useState<string>("");
    const [category, setCategory] = useState<string>("");
    const { user } = useUser();
    const [menuIcon, setMenuIcon] = useState<string>("GridMenu");

    const handleSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const value = event.target.value;
        setSearch(value);
    };

    if (user.email || user.phone_number) {
        return (
            <Box sx={{ flexGrow: 1 }} className="layout-container-fluid">
                <Head>
                    <title>Library</title>
                    <meta name="description" content="Generated by create next app" />
                    <link
                        rel="icon"
                        href="https://images.prismic.io/loop-web-members/4df527d2-6dfb-4c78-9499-a0facef03af3_looptech.webp?auto=compress,format"
                    />
                </Head>
                <div className={styles["library-search-filter-holder"]}>
                    <div className={styles["library-heading"]}>Library</div>
                    <div className={styles["library-search-box"]}>
                        <Search
                            placeholders="Search video"
                            aria_Label="search-box"
                            value={search}
                            handleSearch={handleSearch}
                        />
                    </div>
                    <div className={styles["library-dropdown-or-view-box"]}>
                        <div className={styles["library-dropdown"]}>
                            <Select
                                labelId="category-select-label"
                                id="category-select"
                                label="Category"
                                value={category}
                                displayEmpty
                                onChange={(e) => setCategory(e.target.value)}
                                sx={{ minWidth: 220, maxHeight: 48 }}
                                IconComponent={() => <KeyboardArrowDownIcon />}
                                className="global-select"
                            >
                                <MenuItem value="">All Category</MenuItem>
                                {Categories.map((item, index) => {
                                    return (
                                        <MenuItem value={item.category.toLowerCase()} key={index}>
                                            {item.category}
                                        </MenuItem>
                                    );
                                })}
                            </Select>
                        </div>
                        <div className={styles["library-view-box"]}>
                            <div
                                className={
                                    menuIcon == "GridMenu"
                                        ? styles["library-view-box-active"]
                                        : styles["library-view-box-grid"]
                                }
                                onClick={() => {
                                    setMenuIcon("GridMenu");
                                }}
                            >
                                <GridMenuIcon strokecolor={menuIcon == "GridMenu" ? "#fff" : "#142c60"} />
                            </div>
                            <div
                                className={
                                    menuIcon == "ListMenu"
                                        ? styles["library-view-box-active"]
                                        : styles["library-view-box-grid"]
                                }
                                onClick={() => {
                                    setMenuIcon("ListMenu");
                                }}
                            >
                                <ListBarMenuIcon strokecolor={menuIcon == "ListMenu" ? "#fff" : "#142c60"} />
                            </div>
                        </div>
                    </div>
                </div>
                <LibraryList data={map} search={search} category={category} menuIcon={menuIcon} />
            </Box>
        );
    }
    return <Loader2 />;
};

export default withLayout(LibraryPage);

export const getStaticProps: GetStaticProps = async () => {
    const serverSideProps = await ssrGetAllEventDetail.getServerPage(
        {
            variables: {},
        },
        {},
    );
    const map2 = new Map();
    serverSideProps.props.data.allEventdetailpages.edges &&
        serverSideProps.props.data.allEventdetailpages.edges.length &&
        serverSideProps.props.data.allEventdetailpages.edges.forEach((item) => {
            if (item !== undefined) {
                const node = item.node;
                if (node.meetingId !== undefined && node.image !== undefined) {
                    map2.set(node.meetingId, {
                        image: node.image,
                        passcode: node.passcode,
                        host: node.host,
                        category: node.category,
                        description: node.description,
                        link: node.link,
                        descriptions: node.descriptions,
                    });
                }
            }
        });

    return {
        props: {
            map: JSON.stringify(Array.from(map2)),
        },
        revalidate: 10,
    };
};
