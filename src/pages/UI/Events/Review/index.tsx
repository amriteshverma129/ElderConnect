import Head from "next/head";
import { withLayout } from "../../../../components/Layout/withLayout";
import { NextPage } from "next";
import moment from "moment";
import styles from "../../../../components/Event/Style/eventReviews2.module.scss";
import Rating from "../../../../components/Rating/Rating";
import { Avatar } from "@mui/material";
import { useEffect, useState } from "react";
import { getReviewsBasedOnMeetingIdandStartTimeQuery } from "../../../../components/Event/Queries";
import client from "../../../../apolloClient";
import { useRouter } from "next/router";
import { reviewType } from "../../../../components/Event/Type";
import { useMediaQuery } from "react-responsive";

const ReviewPage: NextPage = () => {
    const router = useRouter();
    const isMobile = useMediaQuery({ query: `(max-width: 576px)` });
    const [reviews, setReviews] = useState<Array<reviewType>>([]);
    const [reviewsAggregate, setReviewsAggregate] = useState<{
        aggregate?: { avg?: { rating?: number }; count?: number };
    }>({});
    const [displayedCards, setDisplayedCards] = useState<number>(6);
    const [offset, setOffset] = useState<number>(0);

    //useEffect will be triggered everytime when offset and router change.
    useEffect(() => {
        // Below Function will be called fetch Rating Review details.
        const fetchReviews = async () => {
            if (router.query.meetingId) {
                const hasuraMeetingDetailRes = await client.query({
                    query: getReviewsBasedOnMeetingIdandStartTimeQuery,
                    variables: {
                        meetingId: router.query.meetingId,
                        startTime: router.query.startTime,
                        offset: offset,
                        limit: 6,
                    },
                });
                const hasuraReviewData = await hasuraMeetingDetailRes.data;
                const reviews2 = await hasuraReviewData.Reviews;
                const reviews_aggregate = await hasuraReviewData.Reviews_aggregate;
                const newReview: Array<{ rating: number; review: string; user: string; created_at: string }> = [
                    ...reviews,
                    ...reviews2,
                ];
                setReviews(newReview);
                setReviewsAggregate(reviews_aggregate);
            }
        };
        fetchReviews();
    }, [router, offset]);

    return (
        <div className="layout-container-fluid">
            <Head>
                <title>Reviews</title>
                <meta name="description" content="Generated by create next app" />
                <link
                    rel="icon"
                    href="https://images.prismic.io/loop-web-members/4df527d2-6dfb-4c78-9499-a0facef03af3_looptech.webp?auto=compress,format"
                />
            </Head>
            <div className={styles["event-review-holder"]}>
                <div className={styles["event-review-rating"]}>
                    {reviewsAggregate?.aggregate?.avg?.rating !== undefined &&
                        reviewsAggregate?.aggregate?.avg?.rating.toFixed(1)}{" "}
                </div>
                <div className={styles["event-review-count-star-holder"]}>
                    {reviewsAggregate?.aggregate?.avg?.rating && (
                        <Rating
                            color={{ filled: "black" }}
                            fontSize={isMobile ? 32 : 50}
                            rating={
                                reviewsAggregate?.aggregate?.avg?.rating === null
                                    ? 0
                                    : reviewsAggregate?.aggregate?.avg?.rating
                            }
                        />
                    )}
                    <span className={styles["event-review-count"]}>{reviewsAggregate?.aggregate?.count} reviews</span>
                </div>
                <div className={styles["event-reviews"]}>
                    {reviews &&
                        reviews.map((review: reviewType, index: number) => {
                            return (
                                <div className={styles["event-review"]} key={index}>
                                    <div className={styles["event-review-avatar-holder"]}>
                                        <Avatar sx={{ height: "55px", width: "55px" }}>
                                            {review.user?.charAt(0).toUpperCase()}
                                        </Avatar>
                                        <div style={{ marginLeft: "20px" }}>
                                            <span className={styles["event-review-name"]}>{review.user}</span>
                                            <br />
                                            <span className={styles["event-review-time"]}>
                                                {moment(review.created_at).format("MMM YYYY")}
                                            </span>
                                        </div>
                                        <span className={styles["event-review-rating1"]}>
                                            {review.rating !== undefined && (
                                                <Rating
                                                    color={{ filled: "#d92d3e" }}
                                                    fontSize={23}
                                                    rating={review.rating}
                                                />
                                            )}
                                        </span>
                                    </div>
                                    <p className={styles["event-review-para"]}>{review.review}</p>
                                    <div className={styles["event-review-rating2"]}>
                                        {review.rating !== undefined && (
                                            <Rating
                                                color={{ filled: "#d92d3e" }}
                                                fontSize={23}
                                                rating={review.rating}
                                            />
                                        )}
                                    </div>
                                </div>
                            );
                        })}
                </div>
            </div>
            <div>
                {reviewsAggregate &&
                reviewsAggregate.aggregate &&
                reviewsAggregate.aggregate.count &&
                reviewsAggregate.aggregate.count > displayedCards ? (
                    <button
                        className={styles["event-loadMore-button"]}
                        onClick={() => {
                            setDisplayedCards(displayedCards + 6);
                            setOffset(offset + 6);
                        }}
                    >
                        View More
                    </button>
                ) : (
                    ""
                )}
            </div>
        </div>
    );
};

export default withLayout(ReviewPage);
