import Head from "next/head";
import dynamic from "next/dynamic";
import { useState, ChangeEvent, useEffect } from "react";
import { NextPage, GetStaticProps } from "next";
import { ssrGetAllEventDetail } from "../../../generated/page";
import { Box } from "@mui/material";
import Loader2 from "../../../components/Loader/Loader2";
const EventList = dynamic(() => import("../../../components/Event/EventList"), {
    loading: () => <EventSkeleton />,
});
import styles from "../../../components/Event/Style/event.module.scss";
import Search from "../../../components/Search/Search";
import FilterModal from "../../../components/Modal/FilterModal";
import { filterType, EventPageProps, dashboardContentType } from "../../../components/Event/Type";
import FeedbackModal from "../../../components/Modal/FeedbackModal";
import { useRouter } from "next/router";
import { toCapitalizeLetter } from "../../../Functions/functions";
import { useUser } from "../../../components/Authenticate/UserContext";
import TrialBar from "../../../components/Layout/TrialBar";
import { withLayout } from "../../../components/Layout/withLayout";
import EventSkeleton from "../../../components/Event/EventSkeleton";
//import Image from "next/image";
import { wordPressGraphqlRequest } from "../../../libs/wordPressGraphqlRequest";
import { getAllWordPressPagesQuery } from "../../../components/Event/Queries";
import Skeleton from "@mui/material/Skeleton";

const Events: NextPage<EventPageProps> = ({ map, cmsWordPages }) => {
    const [search, setSearch] = useState<string>("");
    const [filterObj, setFilterObj] = useState<filterType>({
        startDate: "",
        endDate: "",
        eventStartTime: "",
        eventEndTime: "",
        rating: null,
        startTime: "",
        endTime: "",
        categories: [],
    });
    const router = useRouter();
    const { user, userDetails } = useUser();
    const [filterCount, setFilterCount] = useState(0);
    const [dashboardContent, setDashboardContent] = useState<dashboardContentType>({});

    useEffect(() => {
        if (userDetails.contactId) {
            const filterDataByPageId = (pageId: number) => {
                const filteredData = cmsWordPages?.find((item) => item.pageId === pageId);
                filteredData && setDashboardContent(filteredData);
            };
            // if (userDetails.roles?.includes("The Loop Spectrum Role")) {
            //     filterDataByPageId(7);
            //     return;
            // } else if (userDetails.roles?.includes("The Loop USC Role")) {
            //     filterDataByPageId(12);
            //     return;
            // } else if (userDetails.roles?.includes("The Loop One Generation Role")) {
            //     filterDataByPageId(17);
            //     return;
            // } else {
            filterDataByPageId(19);
            // }
        }
    }, [userDetails, cmsWordPages]);

    useEffect(() => {
        setFilterCount(filterObj.categories.length + Number(filterObj.eventEndTime === "" ? 0 : 1));
    }, [filterObj]);

    const handleSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const value = event.target.value;
        setSearch(value);
    };

    if (user.email || user.phone_number) {
        return (
            <Box sx={{ flexGrow: 1 }} className="layout-container">
                <Head>
                    <title>{userDetails.roles?.includes("The Loop Spectrum Role") ? "(Spectrum) " : ""}Events</title>
                    <meta name="description" content="Generated by create next app" />
                    <link
                        rel="icon"
                        href="https://images.prismic.io/loop-web-members/4df527d2-6dfb-4c78-9499-a0facef03af3_looptech.webp?auto=compress,format"
                    />
                </Head>
                {router && router.query && router.query.meetingId && (
                    <FeedbackModal
                        meetingId={router.query.meetingId}
                        startTime={router.query.startTime}
                        eventTopic={router.query.eventTopic}
                        open={router.query.open === "true" ? true : false}
                    />
                )}

                <div className={styles["event-notice"]}>
                    <div className={styles["event-notice-title"]}>
                        {userDetails.firstName ? (
                            <div>Hello {toCapitalizeLetter(userDetails.firstName)}</div>
                        ) : (
                            <Skeleton
                                variant="rounded"
                                sx={{
                                    width: { xs: "200px", md: "300px" },
                                    height: { xs: "30px", md: "50px" },
                                    borderRadius: "5px",
                                    marginBottom: "20px",
                                }}
                            />
                        )}
                        <TrialBar />
                    </div>
                    {dashboardContent?.content ? (
                        <div className={styles["event-notice-paragraph-image"]}>
                            {dashboardContent?.content && (
                                <div dangerouslySetInnerHTML={{ __html: dashboardContent?.content }} />
                            )}
                            {/* <div className={styles["event-notice-image"]}>
                                <Image
                                    src={dashboardContent?.featuredImage?.node?.sourceUrl || ""}
                                    alt={dashboardContent?.featuredImage?.node?.sourceUrl || ""}
                                    layout="fill"
                                    objectFit="cover"
                                    loading="lazy"
                                />
                            </div> */}
                        </div>
                    ) : (
                        <Skeleton variant="rounded" sx={{ width: "100%", height: "350px", borderRadius: "10px" }} />
                    )}
                </div>
                <div className={styles["event-search-filter-holder"]}>
                    <div className={styles["event-heading"]}>Events</div>
                    <div className={styles["event-search-box"]}>
                        <Search
                            placeholders="Search events"
                            aria_Label="search-box"
                            value={search}
                            handleSearch={handleSearch}
                        />
                    </div>
                    <FilterModal setFilterObj={setFilterObj} filterObj={filterObj}>
                        <button className={styles["event-filter-button"]}>
                            Event filters {filterCount === 0 ? "" : `(${filterCount})`}
                        </button>
                    </FilterModal>
                </div>
                <div className={styles["event-search-box2"]}>
                    <Search
                        placeholders="Search events"
                        aria_Label="search-box"
                        value={search}
                        handleSearch={handleSearch}
                    />
                </div>
                <EventList data={map} search={search} filterObj={filterObj} />
            </Box>
        );
    }
    return <Loader2 />;
};

export default withLayout(Events);

export const getStaticProps: GetStaticProps = async () => {
    const serverSideProps = await ssrGetAllEventDetail.getServerPage(
        {
            variables: {},
        },
        {},
    );
    const map2 = new Map();
    serverSideProps.props.data.allEventdetailpages.edges &&
        serverSideProps.props.data.allEventdetailpages.edges.length &&
        serverSideProps.props.data.allEventdetailpages.edges.forEach((item) => {
            if (item !== undefined) {
                const node = item.node;
                if (node.meetingId !== undefined && node.image !== undefined) {
                    map2.set(node.meetingId, {
                        image: node.image,
                        passcode: node.passcode,
                        host: node.host,
                        category: node.category,
                        description: node.description,
                        link: node.link,
                        descriptions: node.descriptions,
                    });
                }
            }
        });

    const WordPressData = await wordPressGraphqlRequest(getAllWordPressPagesQuery);

    return {
        props: {
            map: JSON.stringify(Array.from(map2)),
            cmsWordPages: WordPressData?.data?.pages?.nodes,
        },
        revalidate: 10,
    };
};
