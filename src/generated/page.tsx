// This file was generated by GraphQL Code Generator. DO NOT EDIT.\n
import * as Types from "./graphql";

import * as Operations from "./graphql";
import { NextRouter, useRouter } from "next/router";
import { QueryHookOptions, useQuery } from "@apollo/client";
import * as Apollo from "@apollo/client";
import type React from "react";
import { getApolloClient, ApolloClientContext } from "../libs/withApollo";
export async function getServerPageGetAllPurchaseMembership(
    options: Omit<Apollo.QueryOptions<Types.GetAllPurchaseMembershipQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllPurchaseMembershipQuery>({
        ...options,
        query: Operations.GetAllPurchaseMembershipDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllPurchaseMembership = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<Types.GetAllPurchaseMembershipQuery, Types.GetAllPurchaseMembershipQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllPurchaseMembershipDocument, options);
};
export type PageGetAllPurchaseMembershipComp = React.FC<{
    data?: Types.GetAllPurchaseMembershipQuery;
    error?: Apollo.ApolloError;
}>;
export const ssrGetAllPurchaseMembership = {
    getServerPage: getServerPageGetAllPurchaseMembership,

    usePage: useGetAllPurchaseMembership,
};
export async function getServerPageGetAllBuddies(
    options: Omit<Apollo.QueryOptions<Types.GetAllBuddiesQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllBuddiesQuery>({
        ...options,
        query: Operations.GetAllBuddiesDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllBuddies = (
    optionsFunc?: (router: NextRouter) => QueryHookOptions<Types.GetAllBuddiesQuery, Types.GetAllBuddiesQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllBuddiesDocument, options);
};
export type PageGetAllBuddiesComp = React.FC<{ data?: Types.GetAllBuddiesQuery; error?: Apollo.ApolloError }>;
export const ssrGetAllBuddies = {
    getServerPage: getServerPageGetAllBuddies,

    usePage: useGetAllBuddies,
};
export async function getServerPageGetSingleBuddy(
    options: Omit<Apollo.QueryOptions<Types.GetSingleBuddyQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetSingleBuddyQuery>({
        ...options,
        query: Operations.GetSingleBuddyDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetSingleBuddy = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<Types.GetSingleBuddyQuery, Types.GetSingleBuddyQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetSingleBuddyDocument, options);
};
export type PageGetSingleBuddyComp = React.FC<{ data?: Types.GetSingleBuddyQuery; error?: Apollo.ApolloError }>;
export const ssrGetSingleBuddy = {
    getServerPage: getServerPageGetSingleBuddy,

    usePage: useGetSingleBuddy,
};
export async function getServerPageGetAllEventDetail(
    options: Omit<Apollo.QueryOptions<Types.GetAllEventDetailPageQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllEventDetailPageQuery>({
        ...options,
        query: Operations.GetAllEventDetailPageDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllEventDetail = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<Types.GetAllEventDetailPageQuery, Types.GetAllEventDetailPageQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllEventDetailPageDocument, options);
};
export type PageGetAllEventDetailComp = React.FC<{
    data?: Types.GetAllEventDetailPageQuery;
    error?: Apollo.ApolloError;
}>;
export const ssrGetAllEventDetail = {
    getServerPage: getServerPageGetAllEventDetail,

    usePage: useGetAllEventDetail,
};
export async function getServerPageGetAllEventDetailBasedOnMeetingId(
    options: Omit<Apollo.QueryOptions<Types.GetAllEventDetailPageBasedOnMeetingIdQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllEventDetailPageBasedOnMeetingIdQuery>({
        ...options,
        query: Operations.GetAllEventDetailPageBasedOnMeetingIdDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllEventDetailBasedOnMeetingId = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<
        Types.GetAllEventDetailPageBasedOnMeetingIdQuery,
        Types.GetAllEventDetailPageBasedOnMeetingIdQueryVariables
    >,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllEventDetailPageBasedOnMeetingIdDocument, options);
};
export type PageGetAllEventDetailBasedOnMeetingIdComp = React.FC<{
    data?: Types.GetAllEventDetailPageBasedOnMeetingIdQuery;
    error?: Apollo.ApolloError;
}>;
export const ssrGetAllEventDetailBasedOnMeetingId = {
    getServerPage: getServerPageGetAllEventDetailBasedOnMeetingId,

    usePage: useGetAllEventDetailBasedOnMeetingId,
};
export async function getServerPageGetAllFaQs(
    options: Omit<Apollo.QueryOptions<Types.GetAllFaQsQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllFaQsQuery>({ ...options, query: Operations.GetAllFaQsDocument });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllFaQs = (
    optionsFunc?: (router: NextRouter) => QueryHookOptions<Types.GetAllFaQsQuery, Types.GetAllFaQsQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllFaQsDocument, options);
};
export type PageGetAllFaQsComp = React.FC<{ data?: Types.GetAllFaQsQuery; error?: Apollo.ApolloError }>;
export const ssrGetAllFaQs = {
    getServerPage: getServerPageGetAllFaQs,

    usePage: useGetAllFaQs,
};
export async function getServerPageGetAllAboutLoopVillages(
    options: Omit<Apollo.QueryOptions<Types.GetAllAboutLoopVillagesQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllAboutLoopVillagesQuery>({
        ...options,
        query: Operations.GetAllAboutLoopVillagesDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllAboutLoopVillages = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<Types.GetAllAboutLoopVillagesQuery, Types.GetAllAboutLoopVillagesQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllAboutLoopVillagesDocument, options);
};
export type PageGetAllAboutLoopVillagesComp = React.FC<{
    data?: Types.GetAllAboutLoopVillagesQuery;
    error?: Apollo.ApolloError;
}>;
export const ssrGetAllAboutLoopVillages = {
    getServerPage: getServerPageGetAllAboutLoopVillages,

    usePage: useGetAllAboutLoopVillages,
};
export async function getServerPageGetAllCareerss(
    options: Omit<Apollo.QueryOptions<Types.GetAllCareerssQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllCareerssQuery>({
        ...options,
        query: Operations.GetAllCareerssDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllCareerss = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<Types.GetAllCareerssQuery, Types.GetAllCareerssQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllCareerssDocument, options);
};
export type PageGetAllCareerssComp = React.FC<{ data?: Types.GetAllCareerssQuery; error?: Apollo.ApolloError }>;
export const ssrGetAllCareerss = {
    getServerPage: getServerPageGetAllCareerss,

    usePage: useGetAllCareerss,
};
export async function getServerPageGetAllFounders(
    options: Omit<Apollo.QueryOptions<Types.GetAllFoundersQueryVariables>, "query">,
    ctx: ApolloClientContext,
) {
    const apolloClient = getApolloClient(ctx);

    const data = await apolloClient.query<Types.GetAllFoundersQuery>({
        ...options,
        query: Operations.GetAllFoundersDocument,
    });

    const apolloState = apolloClient.cache.extract();

    return {
        props: {
            __APOLLO_STATE__: apolloState,
            data: data?.data,
            error: data?.error ?? data?.errors ?? null,
        },
    };
}
export const useGetAllFounders = (
    optionsFunc?: (
        router: NextRouter,
    ) => QueryHookOptions<Types.GetAllFoundersQuery, Types.GetAllFoundersQueryVariables>,
) => {
    const router = useRouter();
    const options = optionsFunc ? optionsFunc(router) : {};
    return useQuery(Operations.GetAllFoundersDocument, options);
};
export type PageGetAllFoundersComp = React.FC<{ data?: Types.GetAllFoundersQuery; error?: Apollo.ApolloError }>;
export const ssrGetAllFounders = {
    getServerPage: getServerPageGetAllFounders,

    usePage: useGetAllFounders,
};
