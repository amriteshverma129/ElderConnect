// This file was generated by GraphQL Code Generator. DO NOT EDIT.\n
import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T | undefined;
export type InputMaybe<T> = T | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Date: Date;
    DateTime: string;
    Json: unknown;
    Long: number;
};

export type Aboutloopvilage = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<AboutloopvilageSlices>>;
    };

/** A connection to a list of items. */
export type AboutloopvilageConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<AboutloopvilageConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type AboutloopvilageConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Aboutloopvilage;
};

export type AboutloopvilageSlices = AboutloopvilageSlicesHero_Panel;

export type AboutloopvilageSlicesHero_Panel = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<AboutloopvilageSlicesHero_PanelVariation>;
};

export type AboutloopvilageSlicesHero_PanelDefault = {
    items?: Maybe<Array<AboutloopvilageSlicesHero_PanelDefaultItems>>;
};

export type AboutloopvilageSlicesHero_PanelDefaultItems = {
    description?: Maybe<Scalars["String"]>;
    image?: Maybe<Scalars["Json"]>;
    title?: Maybe<Scalars["String"]>;
};

export type AboutloopvilageSlicesHero_PanelVariation = AboutloopvilageSlicesHero_PanelDefault;

export type Aboutloopvillage = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<AboutloopvillageSlices>>;
    };

/** A connection to a list of items. */
export type AboutloopvillageConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<AboutloopvillageConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type AboutloopvillageConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Aboutloopvillage;
};

export type AboutloopvillageSlices = AboutloopvillageSlicesAbout_Loop_Page;

export type AboutloopvillageSlicesAbout_Loop_Page = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
};

export type Aboutpage = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<AboutpageSlices>>;
    };

/** A connection to a list of items. */
export type AboutpageConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<AboutpageConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type AboutpageConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Aboutpage;
};

export type AboutpageSlices = AboutpageSlicesAbout_Loop_Vilage;

export type AboutpageSlicesAbout_Loop_Vilage = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
};

export type Buddy = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        aWordFromBuddy?: Maybe<Scalars["String"]>;
        about?: Maybe<Scalars["String"]>;
        background?: Maybe<Scalars["String"]>;
        callAvailability?: Maybe<Scalars["String"]>;
        dislikes?: Maybe<Scalars["String"]>;
        email?: Maybe<Scalars["String"]>;
        familyBackground?: Maybe<Scalars["String"]>;
        favouriteColor?: Maybe<Scalars["String"]>;
        hobbies?: Maybe<Scalars["String"]>;
        image?: Maybe<Scalars["Json"]>;
        likes?: Maybe<Scalars["String"]>;
        name?: Maybe<Scalars["String"]>;
        personality?: Maybe<Scalars["String"]>;
        use?: Maybe<Scalars["String"]>;
    };

/** A connection to a list of items. */
export type BuddyConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<BuddyConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type BuddyConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Buddy;
};

export type Careers = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<CareersSlices>>;
    };

/** A connection to a list of items. */
export type CareersConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<CareersConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type CareersConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Careers;
};

export type CareersSlices = CareersSlicesCareer_Panel | CareersSlicesHero_Panel;

export type CareersSlicesCareer_Panel = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<CareersSlicesCareer_PanelVariation>;
};

export type CareersSlicesCareer_PanelDefault = {
    items?: Maybe<Array<CareersSlicesCareer_PanelDefaultItems>>;
};

export type CareersSlicesCareer_PanelDefaultItems = {
    description?: Maybe<Scalars["String"]>;
    title?: Maybe<Scalars["String"]>;
};

export type CareersSlicesCareer_PanelVariation = CareersSlicesCareer_PanelDefault;

export type CareersSlicesHero_Panel = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<CareersSlicesHero_PanelVariation>;
};

export type CareersSlicesHero_PanelDefault = {
    items?: Maybe<Array<CareersSlicesHero_PanelDefaultItems>>;
};

export type CareersSlicesHero_PanelDefaultItems = {
    description?: Maybe<Scalars["String"]>;
    image?: Maybe<Scalars["Json"]>;
    title?: Maybe<Scalars["String"]>;
};

export type CareersSlicesHero_PanelVariation = CareersSlicesHero_PanelDefault;

export type Eventdetailpage = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        category?: Maybe<Scalars["String"]>;
        description?: Maybe<Scalars["String"]>;
        descriptions?: Maybe<Array<EventdetailpageDescriptions>>;
        host?: Maybe<Scalars["String"]>;
        image?: Maybe<Scalars["Json"]>;
        link?: Maybe<Scalars["String"]>;
        meetingId?: Maybe<Scalars["Float"]>;
        passcode?: Maybe<Scalars["String"]>;
        roles2?: Maybe<Array<EventdetailpageRoles2>>;
        tag?: Maybe<Scalars["String"]>;
    };

/** A connection to a list of items. */
export type EventdetailpageConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<EventdetailpageConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type EventdetailpageConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Eventdetailpage;
};

export type EventdetailpageDescriptions = {
    date?: Maybe<Scalars["Date"]>;
    paragraph?: Maybe<Scalars["String"]>;
};

export type EventdetailpageRoles2 = {
    plan?: Maybe<Scalars["String"]>;
};

export type Faq = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<FaqSlices>>;
    };

/** A connection to a list of items. */
export type FaqConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<FaqConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type FaqConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Faq;
};

export type FaqSlices = FaqSlicesQuestions_Answer;

export type FaqSlicesQuestions_Answer = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<FaqSlicesQuestions_AnswerVariation>;
};

export type FaqSlicesQuestions_AnswerDefault = {
    items?: Maybe<Array<FaqSlicesQuestions_AnswerDefaultItems>>;
    primary?: Maybe<FaqSlicesQuestions_AnswerDefaultPrimary>;
};

export type FaqSlicesQuestions_AnswerDefaultItems = {
    answer?: Maybe<Scalars["String"]>;
    question?: Maybe<Scalars["String"]>;
};

export type FaqSlicesQuestions_AnswerDefaultPrimary = {
    title?: Maybe<Scalars["Json"]>;
};

export type FaqSlicesQuestions_AnswerVariation = FaqSlicesQuestions_AnswerDefault;

export type Founder = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<FounderSlices>>;
    };

/** A connection to a list of items. */
export type FounderConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<FounderConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type FounderConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Founder;
};

export type FounderSlices = FounderSlicesFounder;

export type FounderSlicesFounder = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<FounderSlicesFounderVariation>;
};

export type FounderSlicesFounderDefault = {
    items?: Maybe<Array<FounderSlicesFounderDefaultItems>>;
};

export type FounderSlicesFounderDefaultItems = {
    about?: Maybe<Scalars["String"]>;
    designation?: Maybe<Scalars["String"]>;
    image?: Maybe<Scalars["Json"]>;
    name?: Maybe<Scalars["String"]>;
};

export type FounderSlicesFounderVariation = FounderSlicesFounderDefault;

export type Homepage = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        heading?: Maybe<Scalars["String"]>;
        slices?: Maybe<Array<HomepageSlices>>;
        subheading?: Maybe<Scalars["String"]>;
    };

/** A connection to a list of items. */
export type HomepageConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<HomepageConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type HomepageConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: Homepage;
};

export type HomepageSlices =
    | HomepageSlicesBuddy_Slice_Home
    | HomepageSlicesCommunity_Slice_Home
    | HomepageSlicesLibrary_Slice_Home
    | HomepageSlicesShop_Slice_Home;

export type HomepageSlicesBuddy_Slice_Home = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<HomepageSlicesBuddy_Slice_HomeVariation>;
};

export type HomepageSlicesBuddy_Slice_HomeDefault = {
    items?: Maybe<Array<HomepageSlicesBuddy_Slice_HomeDefaultItems>>;
    primary?: Maybe<HomepageSlicesBuddy_Slice_HomeDefaultPrimary>;
};

export type HomepageSlicesBuddy_Slice_HomeDefaultItems = {
    description?: Maybe<Scalars["String"]>;
    image?: Maybe<Scalars["Json"]>;
    name?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesBuddy_Slice_HomeDefaultPrimary = {
    btncolor?: Maybe<Scalars["String"]>;
    btntext?: Maybe<Scalars["String"]>;
    title?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesBuddy_Slice_HomeVariation = HomepageSlicesBuddy_Slice_HomeDefault;

export type HomepageSlicesCommunity_Slice_Home = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<HomepageSlicesCommunity_Slice_HomeVariation>;
};

export type HomepageSlicesCommunity_Slice_HomeDefault = {
    items?: Maybe<Array<HomepageSlicesCommunity_Slice_HomeDefaultItems>>;
};

export type HomepageSlicesCommunity_Slice_HomeDefaultItems = {
    category?: Maybe<Scalars["String"]>;
    image?: Maybe<Scalars["Json"]>;
    title?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesCommunity_Slice_HomeVariation = HomepageSlicesCommunity_Slice_HomeDefault;

export type HomepageSlicesLibrary_Slice_Home = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<HomepageSlicesLibrary_Slice_HomeVariation>;
};

export type HomepageSlicesLibrary_Slice_HomeDefault = {
    items?: Maybe<Array<HomepageSlicesLibrary_Slice_HomeDefaultItems>>;
    primary?: Maybe<HomepageSlicesLibrary_Slice_HomeDefaultPrimary>;
};

export type HomepageSlicesLibrary_Slice_HomeDefaultItems = {
    image?: Maybe<Scalars["Json"]>;
    title?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesLibrary_Slice_HomeDefaultPrimary = {
    title?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesLibrary_Slice_HomeVariation = HomepageSlicesLibrary_Slice_HomeDefault;

export type HomepageSlicesShop_Slice_Home = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<HomepageSlicesShop_Slice_HomeVariation>;
};

export type HomepageSlicesShop_Slice_HomeDefault = {
    items?: Maybe<Array<HomepageSlicesShop_Slice_HomeDefaultItems>>;
    primary?: Maybe<HomepageSlicesShop_Slice_HomeDefaultPrimary>;
};

export type HomepageSlicesShop_Slice_HomeDefaultItems = {
    title?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesShop_Slice_HomeDefaultPrimary = {
    title?: Maybe<Scalars["String"]>;
};

export type HomepageSlicesShop_Slice_HomeVariation = HomepageSlicesShop_Slice_HomeDefault;

export type Meta = {
    /** Alternate languages the document. */
    alternateLanguages: Array<RelatedDocument>;
    /** The first publication date of the document. */
    firstPublicationDate?: Maybe<Scalars["DateTime"]>;
    /** The id of the document. */
    id: Scalars["String"];
    /** The language of the document. */
    lang: Scalars["String"];
    /** The last publication date of the document. */
    lastPublicationDate?: Maybe<Scalars["DateTime"]>;
    /** The tags of the document. */
    tags: Array<Scalars["String"]>;
    /** The type of the document. */
    type: Scalars["String"];
    /** The uid of the document. */
    uid?: Maybe<Scalars["String"]>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
    /** When paginating forwards, the cursor to continue. */
    endCursor?: Maybe<Scalars["String"]>;
    /** When paginating forwards, are there more items? */
    hasNextPage: Scalars["Boolean"];
    /** When paginating backwards, are there more items? */
    hasPreviousPage: Scalars["Boolean"];
    /** When paginating backwards, the cursor to continue. */
    startCursor?: Maybe<Scalars["String"]>;
};

export type PurchaseMembership = _Document &
    _Linkable & {
        _linkType?: Maybe<Scalars["String"]>;
        _meta: Meta;
        slices?: Maybe<Array<PurchaseMembershipSlices>>;
    };

/** A connection to a list of items. */
export type PurchaseMembershipConnectionConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<PurchaseMembershipConnectionEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type PurchaseMembershipConnectionEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: PurchaseMembership;
};

export type PurchaseMembershipSlices = PurchaseMembershipSlicesPlan;

export type PurchaseMembershipSlicesPlan = {
    label?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
    variation?: Maybe<PurchaseMembershipSlicesPlanVariation>;
};

export type PurchaseMembershipSlicesPlanDefault = {
    primary?: Maybe<PurchaseMembershipSlicesPlanDefaultPrimary>;
};

export type PurchaseMembershipSlicesPlanDefaultPrimary = {
    description?: Maybe<Scalars["String"]>;
    link?: Maybe<Scalars["String"]>;
    price?: Maybe<Scalars["String"]>;
    profit?: Maybe<Scalars["String"]>;
    tag?: Maybe<Scalars["String"]>;
    term?: Maybe<Scalars["String"]>;
    title?: Maybe<Scalars["String"]>;
    type?: Maybe<Scalars["String"]>;
};

export type PurchaseMembershipSlicesPlanVariation = PurchaseMembershipSlicesPlanDefault;

export type Query = {
    _allDocuments: _DocumentConnection;
    allAboutloopvilages: AboutloopvilageConnectionConnection;
    allAboutloopvillages: AboutloopvillageConnectionConnection;
    allAboutpages: AboutpageConnectionConnection;
    allBuddys: BuddyConnectionConnection;
    allCareerss: CareersConnectionConnection;
    allEventdetailpages: EventdetailpageConnectionConnection;
    allFaqs: FaqConnectionConnection;
    allFounders: FounderConnectionConnection;
    allHomepages: HomepageConnectionConnection;
    allPurchaseMemberships: PurchaseMembershipConnectionConnection;
};

export type Query_AllDocumentsArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortDocumentsBy>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    type?: InputMaybe<Scalars["String"]>;
    type_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllAboutloopvilagesArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortAboutloopvilagey>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllAboutloopvillagesArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortAboutloopvillagey>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllAboutpagesArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortAboutpagey>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllBuddysArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortBuddyy>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
    where?: InputMaybe<WhereBuddy>;
};

export type QueryAllCareerssArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortCareersy>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllEventdetailpagesArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortEventdetailpagey>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
    where?: InputMaybe<WhereEventdetailpage>;
};

export type QueryAllFaqsArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortFaqy>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllFoundersArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortFoundery>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type QueryAllHomepagesArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortHomepagey>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
    where?: InputMaybe<WhereHomepage>;
};

export type QueryAllPurchaseMembershipsArgs = {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    firstPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    firstPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    fulltext?: InputMaybe<Scalars["String"]>;
    id?: InputMaybe<Scalars["String"]>;
    id_in?: InputMaybe<Array<Scalars["String"]>>;
    lang?: InputMaybe<Scalars["String"]>;
    last?: InputMaybe<Scalars["Int"]>;
    lastPublicationDate?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_after?: InputMaybe<Scalars["DateTime"]>;
    lastPublicationDate_before?: InputMaybe<Scalars["DateTime"]>;
    similar?: InputMaybe<Similar>;
    sortBy?: InputMaybe<SortPurchaseMembershipy>;
    tags?: InputMaybe<Array<Scalars["String"]>>;
    tags_in?: InputMaybe<Array<Scalars["String"]>>;
    uid?: InputMaybe<Scalars["String"]>;
    uid_in?: InputMaybe<Array<Scalars["String"]>>;
};

export type RelatedDocument = {
    /** The id of the document. */
    id: Scalars["String"];
    /** The language of the document. */
    lang: Scalars["String"];
    /** The type of the document. */
    type: Scalars["String"];
    /** The uid of the document. */
    uid?: Maybe<Scalars["String"]>;
};

export enum SortAboutloopvilagey {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortAboutloopvillagey {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortAboutpagey {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortBuddyy {
    AWordFromBuddyAsc = "aWordFromBuddy_ASC",
    AWordFromBuddyDesc = "aWordFromBuddy_DESC",
    AboutAsc = "about_ASC",
    AboutDesc = "about_DESC",
    BackgroundAsc = "background_ASC",
    BackgroundDesc = "background_DESC",
    CallAvailabilityAsc = "callAvailability_ASC",
    CallAvailabilityDesc = "callAvailability_DESC",
    DislikesAsc = "dislikes_ASC",
    DislikesDesc = "dislikes_DESC",
    EmailAsc = "email_ASC",
    EmailDesc = "email_DESC",
    FamilyBackgroundAsc = "familyBackground_ASC",
    FamilyBackgroundDesc = "familyBackground_DESC",
    FavouriteColorAsc = "favouriteColor_ASC",
    FavouriteColorDesc = "favouriteColor_DESC",
    HobbiesAsc = "hobbies_ASC",
    HobbiesDesc = "hobbies_DESC",
    LikesAsc = "likes_ASC",
    LikesDesc = "likes_DESC",
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
    NameAsc = "name_ASC",
    NameDesc = "name_DESC",
    PersonalityAsc = "personality_ASC",
    PersonalityDesc = "personality_DESC",
    UseAsc = "use_ASC",
    UseDesc = "use_DESC",
}

export enum SortCareersy {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortDocumentsBy {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortEventdetailpagey {
    CategoryAsc = "category_ASC",
    CategoryDesc = "category_DESC",
    DescriptionAsc = "description_ASC",
    DescriptionDesc = "description_DESC",
    HostAsc = "host_ASC",
    HostDesc = "host_DESC",
    LinkAsc = "link_ASC",
    LinkDesc = "link_DESC",
    MeetingIdAsc = "meetingId_ASC",
    MeetingIdDesc = "meetingId_DESC",
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
    PasscodeAsc = "passcode_ASC",
    PasscodeDesc = "passcode_DESC",
    TagAsc = "tag_ASC",
    TagDesc = "tag_DESC",
}

export enum SortFaqy {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortFoundery {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export enum SortHomepagey {
    HeadingAsc = "heading_ASC",
    HeadingDesc = "heading_DESC",
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
    SubheadingAsc = "subheading_ASC",
    SubheadingDesc = "subheading_DESC",
}

export enum SortPurchaseMembershipy {
    MetaFirstPublicationDateAsc = "meta_firstPublicationDate_ASC",
    MetaFirstPublicationDateDesc = "meta_firstPublicationDate_DESC",
    MetaLastPublicationDateAsc = "meta_lastPublicationDate_ASC",
    MetaLastPublicationDateDesc = "meta_lastPublicationDate_DESC",
}

export type WhereBuddy = {
    aWordFromBuddy?: InputMaybe<Scalars["String"]>;
    aWordFromBuddy_fulltext?: InputMaybe<Scalars["String"]>;
    about?: InputMaybe<Scalars["String"]>;
    about_fulltext?: InputMaybe<Scalars["String"]>;
    background?: InputMaybe<Scalars["String"]>;
    background_fulltext?: InputMaybe<Scalars["String"]>;
    callAvailability?: InputMaybe<Scalars["String"]>;
    callAvailability_fulltext?: InputMaybe<Scalars["String"]>;
    dislikes?: InputMaybe<Scalars["String"]>;
    dislikes_fulltext?: InputMaybe<Scalars["String"]>;
    email?: InputMaybe<Scalars["String"]>;
    email_fulltext?: InputMaybe<Scalars["String"]>;
    familyBackground?: InputMaybe<Scalars["String"]>;
    familyBackground_fulltext?: InputMaybe<Scalars["String"]>;
    favouriteColor?: InputMaybe<Scalars["String"]>;
    favouriteColor_fulltext?: InputMaybe<Scalars["String"]>;
    hobbies?: InputMaybe<Scalars["String"]>;
    hobbies_fulltext?: InputMaybe<Scalars["String"]>;
    likes?: InputMaybe<Scalars["String"]>;
    likes_fulltext?: InputMaybe<Scalars["String"]>;
    name?: InputMaybe<Scalars["String"]>;
    name_fulltext?: InputMaybe<Scalars["String"]>;
    personality?: InputMaybe<Scalars["String"]>;
    personality_fulltext?: InputMaybe<Scalars["String"]>;
    use?: InputMaybe<Scalars["String"]>;
    use_fulltext?: InputMaybe<Scalars["String"]>;
};

export type WhereEventdetailpage = {
    category?: InputMaybe<Scalars["String"]>;
    category_fulltext?: InputMaybe<Scalars["String"]>;
    description?: InputMaybe<Scalars["String"]>;
    description_fulltext?: InputMaybe<Scalars["String"]>;
    descriptions?: InputMaybe<WhereEventdetailpageDescriptions>;
    host?: InputMaybe<Scalars["String"]>;
    host_fulltext?: InputMaybe<Scalars["String"]>;
    link?: InputMaybe<Scalars["String"]>;
    link_fulltext?: InputMaybe<Scalars["String"]>;
    /** meeting-id */
    meetingId?: InputMaybe<Scalars["Float"]>;
    /** meeting-id */
    meetingId_gt?: InputMaybe<Scalars["Float"]>;
    /** meeting-id */
    meetingId_lt?: InputMaybe<Scalars["Float"]>;
    /** meeting-id */
    meetingId_range?: InputMaybe<Array<Scalars["Float"]>>;
    passcode?: InputMaybe<Scalars["String"]>;
    passcode_fulltext?: InputMaybe<Scalars["String"]>;
    roles2?: InputMaybe<WhereEventdetailpageRoles2>;
    tag?: InputMaybe<Scalars["String"]>;
    tag_fulltext?: InputMaybe<Scalars["String"]>;
};

export type WhereEventdetailpageDescriptions = {
    /** date */
    date?: InputMaybe<Scalars["Date"]>;
    /** date */
    date_after?: InputMaybe<Scalars["Date"]>;
    /** date */
    date_before?: InputMaybe<Scalars["Date"]>;
    paragraph?: InputMaybe<Scalars["String"]>;
    paragraph_fulltext?: InputMaybe<Scalars["String"]>;
};

export type WhereEventdetailpageRoles2 = {
    plan?: InputMaybe<Scalars["String"]>;
    plan_fulltext?: InputMaybe<Scalars["String"]>;
};

export type WhereHomepage = {
    heading?: InputMaybe<Scalars["String"]>;
    heading_fulltext?: InputMaybe<Scalars["String"]>;
    subheading?: InputMaybe<Scalars["String"]>;
    subheading_fulltext?: InputMaybe<Scalars["String"]>;
};

/** A prismic document */
export type _Document = {
    _meta: Meta;
};

/** A connection to a list of items. */
export type _DocumentConnection = {
    /** A list of edges. */
    edges?: Maybe<Array<Maybe<_DocumentEdge>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    totalCount: Scalars["Long"];
};

/** An edge in a connection. */
export type _DocumentEdge = {
    /** A cursor for use in pagination. */
    cursor: Scalars["String"];
    /** The item at the end of the edge. */
    node: _Document;
};

/** An external link */
export type _ExternalLink = _Linkable & {
    _linkType?: Maybe<Scalars["String"]>;
    target?: Maybe<Scalars["String"]>;
    url: Scalars["String"];
};

/** A linked file */
export type _FileLink = _Linkable & {
    _linkType?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    size: Scalars["Long"];
    url: Scalars["String"];
};

/** A linked image */
export type _ImageLink = _Linkable & {
    _linkType?: Maybe<Scalars["String"]>;
    height: Scalars["Int"];
    name: Scalars["String"];
    size: Scalars["Long"];
    url: Scalars["String"];
    width: Scalars["Int"];
};

/** A prismic link */
export type _Linkable = {
    _linkType?: Maybe<Scalars["String"]>;
};

export type Similar = {
    documentId: Scalars["String"];
    max: Scalars["Int"];
};
export type imageType = {
    dimensions?: {
        width?: string;
        height?: string;
    };
    alt?: string;
    copyright?: string | null;
    url?: string;
};

export type GetAllPurchaseMembershipQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllPurchaseMembershipQuery = {
    allPurchaseMemberships: {
        edges?:
            | Array<
                  | {
                        node: {
                            slices?:
                                | Array<{
                                      variation?:
                                          | {
                                                primary?:
                                                    | {
                                                          tag?: string | undefined;
                                                          title?: string | undefined;
                                                          description?: string | undefined;
                                                          price?: string | undefined;
                                                          term?: string | undefined;
                                                          link?: string | undefined;
                                                          profit?: string | undefined;
                                                          type?: string | undefined;
                                                      }
                                                    | undefined;
                                            }
                                          | undefined;
                                  }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllBuddiesQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllBuddiesQuery = {
    allBuddys: {
        edges?:
            | Array<
                  | {
                        node: {
                            image?: imageType | undefined;
                            name?: string | undefined;
                            email?: string | undefined;
                            callAvailability?: string | undefined;
                            about?: string | undefined;
                            aWordFromBuddy?: string | undefined;
                            favouriteColor?: string | undefined;
                            familyBackground?: string | undefined;
                            background?: string | undefined;
                            likes?: string | undefined;
                            dislikes?: string | undefined;
                            hobbies?: string | undefined;
                            use?: string | undefined;
                            personality?: string | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
    allPurchaseMemberships: {
        edges?:
            | Array<
                  | {
                        node: {
                            slices?:
                                | Array<{
                                      variation?:
                                          | {
                                                primary?:
                                                    | {
                                                          tag?: string | undefined;
                                                          title?: string | undefined;
                                                          description?: string | undefined;
                                                          price?: string | undefined;
                                                          term?: string | undefined;
                                                          link?: string | undefined;
                                                          profit?: string | undefined;
                                                          type?: string | undefined;
                                                      }
                                                    | undefined;
                                            }
                                          | undefined;
                                  }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetSingleBuddyQueryVariables = Exact<{
    email?: InputMaybe<Scalars["String"]>;
}>;

export type GetSingleBuddyQuery = {
    allBuddys: {
        edges?:
            | Array<
                  | {
                        node: {
                            image?: imageType | undefined;
                            name?: string | undefined;
                            email?: string | undefined;
                            callAvailability?: string | undefined;
                            about?: string | undefined;
                            aWordFromBuddy?: string | undefined;
                            favouriteColor?: string | undefined;
                            familyBackground?: string | undefined;
                            background?: string | undefined;
                            likes?: string | undefined;
                            dislikes?: string | undefined;
                            hobbies?: string | undefined;
                            use?: string | undefined;
                            personality?: string | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllEventDetailPageQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllEventDetailPageQuery = {
    allEventdetailpages: {
        edges?:
            | Array<
                  | {
                        node: {
                            image?: unknown | undefined;
                            meetingId?: number | undefined;
                            category?: string | undefined;
                            tag?: string | undefined;
                            host?: string | undefined;
                            passcode?: string | undefined;
                            description?: string | undefined;
                            link?: string | undefined;
                            roles2?: Array<{ plan?: string | undefined }> | undefined;
                            descriptions?:
                                | Array<{ paragraph?: string | undefined; date?: Date | undefined }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllEventDetailPageBasedOnMeetingIdQueryVariables = Exact<{
    meetingId?: InputMaybe<Scalars["Float"]>;
}>;

export type GetAllEventDetailPageBasedOnMeetingIdQuery = {
    allEventdetailpages: {
        edges?:
            | Array<
                  | {
                        node: {
                            image?: imageType | undefined;
                            meetingId?: number | undefined;
                            category?: string | undefined;
                            tag?: string | undefined;
                            host?: string | undefined;
                            passcode?: string | undefined;
                            description?: string | undefined;
                            link?: string | undefined;
                            roles2?: Array<{ plan?: string | undefined }> | undefined;
                            descriptions?:
                                | Array<{ paragraph?: string | undefined; date?: Date | undefined }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
    eventDetailPageByMeetingId: {
        edges?:
            | Array<
                  | {
                        node: {
                            image?: unknown | undefined;
                            meetingId?: number | undefined;
                            category?: string | undefined;
                            tag?: string | undefined;
                            host?: string | undefined;
                            passcode?: string | undefined;
                            description?: string | undefined;
                            link?: string | undefined;
                            roles2?: Array<{ plan?: string | undefined }> | undefined;
                            descriptions?:
                                | Array<{ paragraph?: string | undefined; date?: Date | undefined }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllFaQsQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllFaQsQuery = {
    allFaqs: {
        edges?:
            | Array<
                  | {
                        node: {
                            slices?:
                                | Array<{
                                      variation?:
                                          | {
                                                primary?: { title?: unknown | undefined } | undefined;
                                                items?:
                                                    | Array<{
                                                          question?: string | undefined;
                                                          answer?: string | undefined;
                                                      }>
                                                    | undefined;
                                            }
                                          | undefined;
                                  }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllAboutLoopVillagesQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllAboutLoopVillagesQuery = {
    allAboutloopvilages: {
        edges?:
            | Array<
                  | {
                        node: {
                            slices?:
                                | Array<{
                                      variation?:
                                          | {
                                                items?:
                                                    | Array<{
                                                          title?: string | undefined;
                                                          description?: string | undefined;
                                                          image?: imageType | undefined;
                                                      }>
                                                    | undefined;
                                            }
                                          | undefined;
                                  }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllCareerssQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllCareerssQuery = {
    allCareerss: {
        edges?:
            | Array<
                  | {
                        node: {
                            slices?:
                                | Array<
                                      | {
                                            variation?:
                                                | {
                                                      items?:
                                                          | Array<{
                                                                title?: string | undefined;
                                                                description?: string | undefined;
                                                            }>
                                                          | undefined;
                                                  }
                                                | undefined;
                                        }
                                      | {
                                            variation?:
                                                | {
                                                      items?:
                                                          | Array<{
                                                                title?: string | undefined;
                                                                description?: string | undefined;
                                                                image?: imageType | undefined;
                                                            }>
                                                          | undefined;
                                                  }
                                                | undefined;
                                        }
                                  >
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export type GetAllFoundersQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllFoundersQuery = {
    allFounders: {
        edges?:
            | Array<
                  | {
                        node: {
                            slices?:
                                | Array<{
                                      variation?:
                                          | {
                                                items?:
                                                    | Array<{
                                                          name?: string | undefined;
                                                          designation?: string | undefined;
                                                          about?: string | undefined;
                                                          image?: imageType | undefined;
                                                      }>
                                                    | undefined;
                                            }
                                          | undefined;
                                  }>
                                | undefined;
                        };
                    }
                  | undefined
              >
            | undefined;
    };
};

export const GetAllPurchaseMembershipDocument = gql`
    query getAllPurchaseMembership {
        allPurchaseMemberships {
            edges {
                node {
                    slices {
                        ... on PurchaseMembershipSlicesPlan {
                            variation {
                                ... on PurchaseMembershipSlicesPlanDefault {
                                    primary {
                                        tag
                                        title
                                        description
                                        price
                                        term
                                        link
                                        profit
                                        type
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
`;
export type GetAllPurchaseMembershipQueryResult = Apollo.QueryResult<
    GetAllPurchaseMembershipQuery,
    GetAllPurchaseMembershipQueryVariables
>;
export const GetAllBuddiesDocument = gql`
    query getAllBuddies {
        allBuddys {
            edges {
                node {
                    image
                    name
                    email
                    callAvailability
                    about
                    aWordFromBuddy
                    favouriteColor
                    familyBackground
                    background
                    likes
                    dislikes
                    hobbies
                    use
                    personality
                }
            }
        }
        allPurchaseMemberships {
            edges {
                node {
                    slices {
                        ... on PurchaseMembershipSlicesPlan {
                            variation {
                                ... on PurchaseMembershipSlicesPlanDefault {
                                    primary {
                                        tag
                                        title
                                        description
                                        price
                                        term
                                        link
                                        profit
                                        type
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
`;
export type GetAllBuddiesQueryResult = Apollo.QueryResult<GetAllBuddiesQuery, GetAllBuddiesQueryVariables>;
export const GetSingleBuddyDocument = gql`
    query getSingleBuddy($email: String) {
        allBuddys(where: { email: $email }) {
            edges {
                node {
                    image
                    name
                    email
                    callAvailability
                    about
                    aWordFromBuddy
                    favouriteColor
                    familyBackground
                    background
                    likes
                    dislikes
                    hobbies
                    use
                    personality
                }
            }
        }
    }
`;
export type GetSingleBuddyQueryResult = Apollo.QueryResult<GetSingleBuddyQuery, GetSingleBuddyQueryVariables>;
export const GetAllEventDetailPageDocument = gql`
    query getAllEventDetailPage {
        allEventdetailpages(first: 1000) {
            edges {
                node {
                    image
                    meetingId
                    category
                    tag
                    host
                    passcode
                    description
                    link
                    roles2 {
                        plan
                    }
                    descriptions {
                        paragraph
                        date
                    }
                }
            }
        }
    }
`;
export type GetAllEventDetailPageQueryResult = Apollo.QueryResult<
    GetAllEventDetailPageQuery,
    GetAllEventDetailPageQueryVariables
>;
export const GetAllEventDetailPageBasedOnMeetingIdDocument = gql`
    query getAllEventDetailPageBasedOnMeetingId($meetingId: Float) {
        allEventdetailpages(first: 1000) {
            edges {
                node {
                    image
                    meetingId
                    category
                    tag
                    host
                    passcode
                    description
                    link
                    roles2 {
                        plan
                    }
                    descriptions {
                        paragraph
                        date
                    }
                }
            }
        }
        eventDetailPageByMeetingId: allEventdetailpages(where: { meetingId: $meetingId }) {
            edges {
                node {
                    image
                    meetingId
                    category
                    tag
                    host
                    passcode
                    description
                    link
                    roles2 {
                        plan
                    }
                    descriptions {
                        paragraph
                        date
                    }
                }
            }
        }
    }
`;
export type GetAllEventDetailPageBasedOnMeetingIdQueryResult = Apollo.QueryResult<
    GetAllEventDetailPageBasedOnMeetingIdQuery,
    GetAllEventDetailPageBasedOnMeetingIdQueryVariables
>;
export const GetAllFaQsDocument = gql`
    query getAllFAQs {
        allFaqs {
            edges {
                node {
                    slices {
                        ... on FaqSlicesQuestions_answer {
                            variation {
                                ... on FaqSlicesQuestions_answerDefault {
                                    primary {
                                        title
                                    }
                                    items {
                                        question
                                        answer
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
`;
export type GetAllFaQsQueryResult = Apollo.QueryResult<GetAllFaQsQuery, GetAllFaQsQueryVariables>;
export const GetAllAboutLoopVillagesDocument = gql`
    query getAllAboutLOOPVillages {
        allAboutloopvilages {
            edges {
                node {
                    slices {
                        ... on AboutloopvilageSlicesHero_panel {
                            variation {
                                ... on AboutloopvilageSlicesHero_panelDefault {
                                    items {
                                        title
                                        description
                                        image
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
`;
export type GetAllAboutLoopVillagesQueryResult = Apollo.QueryResult<
    GetAllAboutLoopVillagesQuery,
    GetAllAboutLoopVillagesQueryVariables
>;
export const GetAllCareerssDocument = gql`
    query getAllCareerss {
        allCareerss {
            edges {
                node {
                    slices {
                        ... on CareersSlicesHero_panel {
                            variation {
                                ... on CareersSlicesHero_panelDefault {
                                    items {
                                        title
                                        description
                                        image
                                    }
                                }
                            }
                        }
                        ... on CareersSlicesCareer_panel {
                            variation {
                                ... on CareersSlicesCareer_panelDefault {
                                    items {
                                        title
                                        description
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
`;
export type GetAllCareerssQueryResult = Apollo.QueryResult<GetAllCareerssQuery, GetAllCareerssQueryVariables>;
export const GetAllFoundersDocument = gql`
    query getAllFounders {
        allFounders {
            edges {
                node {
                    slices {
                        ... on FounderSlicesFounder {
                            variation {
                                ... on FounderSlicesFounderDefault {
                                    items {
                                        name
                                        designation
                                        about
                                        image
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
`;
export type GetAllFoundersQueryResult = Apollo.QueryResult<GetAllFoundersQuery, GetAllFoundersQueryVariables>;
