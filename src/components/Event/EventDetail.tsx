import React, { useState, useEffect } from "react";
import moment from "moment";
import styles from "./Style/eventDetail.module.scss";
import FeedbackModal from "../Modal/FeedbackModal";
import CategoryIcon from "../../icons/CategoryIcon";
import CalenderIcon from "../../icons/CalenderIcon";
import GlobeIcon from "../../icons/GlobeIcon";
import loadable from "@loadable/component";
const EventReviews = loadable(() => import("./EventReviews"));
import { meetingType2, EventDetailProps, nodeType } from "./Type";
import RatingReview from "./RatingReview";
import CountDownTimer from "../CountDownTimer/CountDownTimer";
import JoinEventButton from "./JoinEventButton";
// import NeedHelpModal from "../Modal/NeedHelpModal";
import Image from "next/image";
import { fetchMeetingDetail, fetchMeetingDetail2 } from "../../Functions/Event/function";
import { getFormattedTime } from "../../Functions/functions";
import { EventList2Skeleton } from "./EventList2Skeleton";
import dynamic from "next/dynamic";
const EventList2 = dynamic(() => import("../../components/Event/EventList2"), {
    loading: () => <EventList2Skeleton />,
});
import Skeleton from "@mui/material/Skeleton";
import Head from "next/head";
import { useUser } from "../Authenticate/UserContext";

//Event Detail Component show the whole description about the event, review on events
const EventDetail = ({ meetingId, startTime }: EventDetailProps) => {
    const { userDetails } = useUser();
    const [meeting, setMeeting] = useState<meetingType2>({});
    const [node, setNode] = useState<nodeType>({});
    const [start, setStart] = useState<boolean>(false);
    const [description, setDiscription] = useState<string | undefined>("");
    const [readMore, setReadMore] = useState(false);

    //useEffect will be triggered everytime new props come.
    useEffect(() => {
        if (startTime) fetchMeetingDetail(meetingId, startTime, setMeeting);
        else fetchMeetingDetail2(meetingId, setMeeting);
        const prismicContentStr = localStorage.getItem("prismicContent");
        const prismicContent = prismicContentStr && JSON.parse(prismicContentStr);
        const map2: Map<number, nodeType> = new Map(prismicContent);
        const node = map2.get(Number(meetingId));
        node && setNode(node);
    }, [meetingId, startTime]);

    useEffect(() => {
        setDiscription("");
        if (node.descriptions) {
            // Filtring the array of discriptions and selecting an appropriate discription based on sunday time, and meeting time.
            const newDescription = node.descriptions.filter((obj: { paragraph?: string; date?: Date }) => {
                const meetingTime = moment(moment(meeting?.startTime).format("YYYY-MM-DD"));
                const sundayTime = moment(moment(obj.date).format("YYYY-MM-DD"));
                return meetingTime.diff(sundayTime, "days") >= 0 && meetingTime.diff(sundayTime, "days") <= 6;
            });
            if (newDescription.length) {
                setDiscription(newDescription[0].paragraph);
            }
        }
    }, [node, meeting?.startTime]);

    const renderDescription = () => {
        if (readMore) {
            return (
                <>
                    {node?.description}&nbsp;
                    {node?.link && (
                        <a href={node?.link} className={styles["event-detail-link"]} rel="noreferrer" target="_blank">
                            Click here
                        </a>
                    )}
                    {description && (
                        <>
                            <br />
                            <br />
                            {description}
                        </>
                    )}
                </>
            );
        } else {
            return <>{node?.description?.split(" ").slice(0, 30).join(" ") + "..."}</>;
        }
    };

    const toggleReadMore = () => {
        setReadMore(!readMore);
    };

    return (
        <>
            <Head>
                <title>
                    {userDetails.roles?.includes("The Loop Spectrum Role") ? "(Spectrum) " : ""}Events-
                    {meeting?.eventTopic}
                </title>
                <meta name="description" content="Generated by create next app" />
                <link
                    rel="icon"
                    href="https://images.prismic.io/loop-web-members/4df527d2-6dfb-4c78-9499-a0facef03af3_looptech.webp?auto=compress,format"
                />
            </Head>
            <div className="layout-container-fluid">
                <div className={styles["event-detail"]}>
                    <div className={styles["event-detail-content"]}>
                        {meeting?.eventTopic ? (
                            <h4 className={styles["event-detail-title"]}>{meeting?.eventTopic}</h4>
                        ) : (
                            <Skeleton variant="text" sx={{ fontSize: "40px", width: "50%" }} />
                        )}
                        <div className={styles["event-detail-time"]}>
                            {meeting?.startTime && meeting?.duration ? (
                                <span className={styles["event-detail-time2"]}>
                                    <span>{moment(meeting?.startTime).format("dddd, MMMM Do")}</span>
                                    <span className={styles["event-detail-line"]}></span>
                                    <span>
                                        {moment(meeting?.startTime).format("LT")} -{" "}
                                        {meeting?.duration &&
                                            moment(meeting?.startTime)
                                                .add(meeting?.duration / 60, "hour")
                                                .format("LT")}
                                    </span>
                                </span>
                            ) : (
                                <Skeleton variant="text" sx={{ fontSize: "30px", width: "40%" }} />
                            )}
                            <span className={styles["event-detail-tag"]}>{node.category}</span>
                        </div>
                    </div>
                    <div className={styles["event-detail-image-about-holder"]}>
                        <div className={styles["event-detail-image"]}>
                            {node?.image?.url && (
                                <Image
                                    src={node.image.url}
                                    alt={node.image.url}
                                    layout="fill"
                                    objectFit="cover"
                                    loading="lazy"
                                />
                            )}
                        </div>
                        <div className={styles["event-detail-about"]}>
                            <div className={styles["event-detail-heading"]}>About Event</div>
                            <div className={styles["event-detail-countdown-timer"]}>
                                {meeting?.startTime && meeting?.duration && (
                                    <CountDownTimer
                                        setStart={setStart}
                                        start={start}
                                        duration={meeting?.duration}
                                        startTime={meeting?.startTime}
                                        show={true}
                                    />
                                )}
                            </div>
                            <div className={styles["event-detail-rating-btn-holder"]}>
                                {meeting?.Reviews_aggregate?.aggregate?.avg?.rating === null ? (
                                    <RatingReview value={0} ratingValue={"0"} noOfReview={0} color={"#d92d3e"} />
                                ) : (
                                    meeting?.Reviews_aggregate?.aggregate?.avg?.rating && (
                                        <RatingReview
                                            value={meeting?.Reviews_aggregate?.aggregate?.avg?.rating}
                                            ratingValue={meeting?.Reviews_aggregate?.aggregate?.avg?.rating?.toFixed(1)}
                                            noOfReview={meeting?.Reviews_aggregate?.aggregate?.count}
                                            color={"#d92d3e"}
                                        />
                                    )
                                )}
                                {moment(getFormattedTime(meeting?.endTime)).isBefore(
                                    moment().format("YYYY-MM-DDTHH:mm:ss"),
                                ) ? (
                                    <FeedbackModal
                                        meetingId={meetingId}
                                        startTime={meeting?.startTime}
                                        eventTopic={meeting?.eventTopic}
                                    >
                                        <button className={styles["event-detail-feedback-btn"]}>
                                            Submit Rating/Feedback
                                        </button>
                                    </FeedbackModal>
                                ) : (
                                    <></>
                                )}
                            </div>
                            <div style={{ marginTop: "15px", marginBottom: "15px" }}>
                                <div className={styles["event-detail-category-holder"]}>
                                    <CategoryIcon />
                                    <span className={styles["event-detail-category"]}>{node.category}</span>
                                </div>
                                <div className={styles["event-detail-category-holder"]}>
                                    <GlobeIcon />
                                    <span className={styles["event-detail-category"]}>English</span>
                                </div>
                                <div className={styles["event-detail-category-holder"]}>
                                    <CalenderIcon />
                                    <span className={styles["event-detail-category"]}>
                                        <span>{moment(meeting?.startTime).format("dddd, MMMM Do")}</span>
                                        <span className={styles["event-detail-line"]}></span>
                                        <span>
                                            {moment(meeting?.startTime).format("LT")} -{" "}
                                            {meeting?.duration &&
                                                moment(meeting?.startTime)
                                                    .add(meeting?.duration / 60, "hour")
                                                    .format("LT")}
                                        </span>
                                    </span>
                                </div>
                            </div>
                            <p className={styles["event-detail-para"]}>
                                {renderDescription()}
                                <span onClick={toggleReadMore} className={styles["event-detail-readMore"]}>
                                    <span>{readMore ? <p>Show Less</p> : "Read More"}</span>
                                </span>
                            </p>
                            {meetingId &&
                                typeof meetingId === "string" &&
                                meeting?.startTime &&
                                node.passcode &&
                                meeting?.duration &&
                                meeting?.eventTopic && (
                                    <div className={styles["event-detail-btn"]}>
                                        <JoinEventButton
                                            meetingId={Number(meetingId)}
                                            startTime={meeting?.startTime}
                                            passcode={node.passcode}
                                            duration={meeting?.duration}
                                            eventTopic={meeting?.eventTopic}
                                            join_url={meeting?.join_url}
                                        />
                                    </div>
                                )}
                        </div>
                    </div>
                    {/* Below Component will show all the Reviews on this event, avg rating */}
                    <EventReviews meeting={meeting} />
                </div>
            </div>
            <EventList2 category={node.category} />
        </>
    );
};
export default EventDetail;
